{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Home Learning Task 4.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Task 1\n",
        "\n",
        "Write a program that allows you to enter 4 numbers and stores them in a file called “Numbers”\n",
        "\n",
        "•\t3\n",
        "•\t45\n",
        "•\t83\n",
        "•\t21\n",
        "\n",
        "Have a go at ‘w’ ‘r’  ‘a’\n",
        "\n"
      ],
      "metadata": {
        "id": "SblPYcG44LPo"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xkw6JhT1wIh5",
        "outputId": "efd87923-93b4-40e1-c06c-740ed03e929a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "please enter 4 numbers: 3, 45, 83, 21\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n"
          ]
        }
      ],
      "source": [
        "#Task 1 'w'\n",
        "\n",
        "my_file = open(\"numbers.txt\",\"w\")\n",
        "\n",
        "print(\"please enter 4 numbers: 3, 45, 83, 21\")\n",
        "\n",
        "no_1 = input(str(\"\"))\n",
        "my_file.write(no_1)\n",
        "my_file.write(\"\\n\")\n",
        "\n",
        "no_2 = input(str(\"\"))\n",
        "my_file.write(no_2)\n",
        "my_file.write(\"\\n\")\n",
        "\n",
        "no_3 = input(str(\"\"))\n",
        "my_file.write(no_3)\n",
        "my_file.write(\"\\n\")\n",
        "\n",
        "no_4 = input(str(\"\"))\n",
        "my_file.write(no_4)\n",
        "my_file.write(\"\\n\")\n",
        "\n",
        "my_file.close()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Task 1 'r'\n",
        "\n",
        "with open(\"numbers.txt\", \"r\") as myfile:\n",
        "    data = myfile.read()\n",
        "\n",
        "myfile.close()\n",
        "\n",
        "print(data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xTk90Wwe4qG6",
        "outputId": "ebed6143-01bb-4425-d13b-b1af5e93d3ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "This is appended to a file\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Task 1 'a'\n",
        "\n",
        "my_file = open(\"numbers.txt\", \"a\")\n",
        "\n",
        "my_file.write(\"This is appended to a file\\n\")\n",
        "\n",
        "my_file.close()"
      ],
      "metadata": {
        "id": "jgunHLGL5BNl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 2\n",
        "\n",
        "Write a program to ask a student for their percentage mark and convert this to a grade\n",
        "\n",
        "The conversion will be done in a function called mark_grade\n",
        "\n",
        "Extension to Task 2\n",
        "\n",
        "Ask the user for their target grade and print this with their mark\n",
        "\n",
        "If their target grade > exam grade display a suitable message\n",
        "\n",
        "If their target grade = exam grade display a suitable message\n",
        "\n",
        "If their target grade < exam grade display a suitable message\n"
      ],
      "metadata": {
        "id": "L_CB-Cq_D8tV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Task 2\n",
        "\n",
        "def user(input_name):\n",
        "\n",
        "  print(\"Hello\", input_name + \"!\" , \"Please enter your percentage mark?\", \"\\n\")\n",
        "\n",
        "name = input(\"What is your name? \")\n",
        "\n",
        "user(name)\n",
        "\n",
        "percentage_mark = float(input(\"enter % mark = \"))\n",
        "print(\"\\n\")\n",
        "print(\"Grade description:\")\n",
        "print(\"70% to 100%: This is grade A\")\n",
        "print(\"60% to 69% : This is grade B\")\n",
        "print(\"40% to 59% : This is grade C\")\n",
        "print(\"0% to 39%  : No award\", \"\\n\")\n",
        "\n",
        "target_grade = input(\"What is your target grade i.e. A, B, C: \")\n",
        "print(\"\\n\")\n",
        "\n",
        "def mark_grade(target_grade): #Extension to Task 2\n",
        "  \n",
        "  if percentage_mark >= 70 and percentage_mark <= 100:\n",
        "    if target_grade == \"A\":\n",
        "      print(\"A is highest grade\")\n",
        "    else:\n",
        "      print(\"The grade is not match\")    \n",
        "  elif percentage_mark >= 60 and percentage_mark <= 69:\n",
        "    if target_grade == \"B\":\n",
        "      print(\"B is very strong pass\")\n",
        "    else:\n",
        "      print(\"The grade is not match\")\n",
        "  elif percentage_mark >= 40 and percentage_mark <= 59:\n",
        "    if target_grade == \"C\":\n",
        "      print(\"C is pass\")\n",
        "    else:\n",
        "      print(\"The grade is not match\")\n",
        "  elif percentage_mark >= 0 and percentage_mark <= 39:\n",
        "      print(\"No award\")\n",
        "  else: #no choice of target_grade\n",
        "    print(\"You have not typed a valid grade, please run the program again.\")\n",
        "    \n",
        "calculate = target_grade\n",
        "\n",
        "mark_grade(calculate)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a159ece1-713f-41be-8716-41aabdd04d5b",
        "id": "y-Cdcexgme1A"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "What is your name? A\n",
            "Hello A! Please enter your percentage mark? \n",
            "\n",
            "enter % mark = 100\n",
            "\n",
            "\n",
            "Grade description:\n",
            "70% to 100%: This is grade A\n",
            "60% to 69% : This is grade B\n",
            "40% to 59% : This is grade C\n",
            "0% to 39%  : No award \n",
            "\n",
            "What is your target grade i.e. A, B, C: A\n",
            "\n",
            "\n",
            "A is highest grade\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 3\n",
        "\n",
        "1. Create a 1D array of numbers from 0 to 9\n",
        "2. Create a 3×3 NumPy array of all Boolean value Trues\n",
        "3. Extract all odd numbers from array of 1-10\n",
        "4. Replace all odd numbers in an array of 1-10 with the value -1\n",
        "5. Convert a 1D array to a 2D array with 2 rows\n",
        "6. Create two arrays a and b, stack these two arrays vertically use the  np.dot and np.sum to calculate totals\n",
        "\n",
        "Extension to Task 3\n",
        "\n",
        "1. Create the following pattern without hardcoding. Use only NumPy  functions.\n",
        "    #>array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])\n",
        "2. In two arrays a (1,2,3,4,5) and b (4,5,6,7,8,9) – remove all repeating  items present in array b\n",
        "3. Get all items between 3 and 7 from a and b and sum them together\n",
        "\n"
      ],
      "metadata": {
        "id": "JOK1wxP6xtmY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Task 3\n",
        "\n",
        "first_1D_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] #1. create 1D array of numbers from 0 to 9\n",
        "\n",
        "for row in range(len(first_1D_list[0:1])):\n",
        "    for column in range(len(first_1D_list)):\n",
        "        print(\"My list at row\", row, \"and column\", column, \"is:\", first_1D_list[column])"
      ],
      "metadata": {
        "id": "SjmYxvXGETdi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e0dd371f-0644-487a-921c-194daacca229"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "My list at row 0 and column 0 is: 0\n",
            "My list at row 0 and column 1 is: 1\n",
            "My list at row 0 and column 2 is: 2\n",
            "My list at row 0 and column 3 is: 3\n",
            "My list at row 0 and column 4 is: 4\n",
            "My list at row 0 and column 5 is: 5\n",
            "My list at row 0 and column 6 is: 6\n",
            "My list at row 0 and column 7 is: 7\n",
            "My list at row 0 and column 8 is: 8\n",
            "My list at row 0 and column 9 is: 9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np                                                  #quicker to type np than NumPy\n",
        "\n",
        "boolean = np.array([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], dtype=bool) #2. create a 3×3 NumPy array of all Boolean value Trues\n",
        "print(boolean)\n",
        "print(\"\\n\", \"Values other than 0, none i.e. '', False, or empty strings i.e. \"\" are considered True\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L-uzxzBj00-0",
        "outputId": "1f387641-8b07-47b5-ec06-4cc9798f9b16"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[ True  True  True]\n",
            "  [ True  True  True]\n",
            "  [ True  True  True]]]\n",
            "\n",
            " Values other than 0, none i.e. '', False, or empty strings i.e.  are considered True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "odd = np.arange(1, 10, 2) #3. extract all odd numbers from array of 1-10\n",
        "print(odd)                #show odd numbers of 1-10"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2uZcpFvbZ_bq",
        "outputId": "588eba68-21da-4d21-aa04-295dab9f1718"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 3 5 7 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "odd[0:] = -1  #4. replace all odd numbers in an array of 1-10 with the value -1\n",
        "print(odd)    #assigns array element row 0 the value -1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XsG96VR1eH3j",
        "outputId": "3b3e56eb-7c2d-4764-c3dc-cbc142e8b0dd"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-1 -1 -1 -1 -1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "second_1D_list = np.array([first_1D_list])  #5. convert a 1D array to a 2D array with 2 rows\n",
        "my_2D_list = second_1D_list.reshape(2, 5)\n",
        "print(my_2D_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TylzNckTyPwg",
        "outputId": "a4fc087d-501a-4d0f-f1b8-93ef0bc68d85"
      },
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0 1 2 3 4]\n",
            " [5 6 7 8 9]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = np.arange(1, 10).reshape(3, 3)  #6. create two arrays a and b, stack these two arrays vertically use the np.dot and np.sum to calculate totals\n",
        "b = np.arange(10, 19).reshape(3, 3)\n",
        "c = np.vstack((a, b))               #stacks array vertically (row wise)\n",
        "print(c)\n",
        "d = np.dot(a, b)                    #matrix multiplication of 2 matrice of the same size\n",
        "print(d)\n",
        "e = np.sum(d)                       #overall sum of all elements\n",
        "print(e)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QdJ--6jlSJpZ",
        "outputId": "3d5a90d5-bd98-43e2-be1b-01d94529df9f"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1  2  3]\n",
            " [ 4  5  6]\n",
            " [ 7  8  9]\n",
            " [10 11 12]\n",
            " [13 14 15]\n",
            " [16 17 18]]\n",
            "[[ 84  90  96]\n",
            " [201 216 231]\n",
            " [318 342 366]]\n",
            "1944\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Extension to Task 3\n",
        "\n",
        "one_1s = np.ones(3)\n",
        "print(one_1s)\n",
        "\n",
        "two_2s = np.add(one_1s, 1)\n",
        "print(two_2s)\n",
        "\n",
        "three_3s = np.multiply(one_1s, 3)\n",
        "print(three_3s)\n",
        "\n",
        "arange = np.arange(1, 4)\n",
        "print(arange)\n",
        "\n",
        "repeat = np.tile(arange, 3)                                   #generate a new ndarray in which the original ndarray is repeatedly arranged\n",
        "print(repeat)\n",
        "\n",
        "pattern = np.concatenate((one_1s, two_2s, three_3s, repeat))  #1. create patern of array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])\n",
        "print(pattern)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gXJfPaEb5qIQ",
        "outputId": "4680ce9e-deeb-4858-c7be-e97ad4a04bd4"
      },
      "execution_count": 181,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1. 1. 1.]\n",
            "[2. 2. 2.]\n",
            "[3. 3. 3.]\n",
            "[1 2 3]\n",
            "[1 2 3 1 2 3 1 2 3]\n",
            "[1. 1. 1. 2. 2. 2. 3. 3. 3. 1. 2. 3. 1. 2. 3. 1. 2. 3.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = [1, 2, 3, 4, 5]\n",
        "b = [4, 5, 6, 7, 8, 9]\n",
        "print(a, np.delete(b, [0, 1]))  #2. remove all repeating items present in array b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b1p_DRTiCcAU",
        "outputId": "a0839bde-6ecc-4f9c-c0c0-05c591ad92b9"
      },
      "execution_count": 208,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4, 5] [6 7 8 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c = np.concatenate((a, b))\n",
        "print(c[2:9], np.sum(c[2:9])) #3. get all items between 3 and 7 from a and b and sum them together"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jEPnNTsoMl87",
        "outputId": "20421da3-6f2c-41a7-f477-52fae9291ff5"
      },
      "execution_count": 217,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3 4 5 4 5 6 7] 34\n"
          ]
        }
      ]
    }
  ]
}